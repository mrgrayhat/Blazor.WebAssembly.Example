@page "/edit/{id:int}"
@inject IBlogClient BlogClient
@inject NavigationManager navigator
@inject ToastService toastService
@attribute [Authorize]
@*@using Microsoft.AspNetCore.Authorization*@

<div class="container">
    <div class="row">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="#">Blog</a></li>
                <li class="breadcrumb-item active" aria-current="page">Edit Post</li>
            </ol>
        </nav>
    </div>
    @if (PostDto is null)
    {
        <p class="text-info">Loading...</p>
    }
    else
    {
        <EditForm Model="PostDto" OnValidSubmit="HanleValidSubmit">
            <DataAnnotationsValidator />
            <i class="oi oi-warning" />
            <div class="row mt-4">
                <ValidationSummary />
            </div>

            @*<div class="row mt-4">
                    <i class="oi oi-person" />
                    <label for="author"> Author</label>
                    <InputText id="author" @bind-Value="@UserName" class="form-control" />
                </div>*@
            <div class="row mt-4">
                <i class="oi oi-header" />
                <label for="title"> Title</label>
                <InputText id="title" @bind-Value="PostDto.Title" class="form-control" />
            </div>
            <div class="row mt-4">
                <i class="oi oi-text" />
                <label for="body"> Body</label>
                <InputTextArea id="body" @bind-Value="PostDto.Body" class="form-control" rows="10" />
            </div>
            <div class="row mt-4">
                <i class="oi oi-data-transfer-upload" />
                <label for="thumbnail"> Thumbnail Photo</label>
                <InputText name="thumbnail" id="thumbnail" @bind-Value="PostDto.Thumbnail" class="form-control" />
            </div>
            <div class="row mt-4">
                <i class="oi oi-tags" />
                <label for="tags"> Tags (Seperate by ;)</label>
                <InputText id="tags" @bind-Value="PostDto.Tags" class="form-control" />
            </div>
            <div class="row mt-4">
                <i class="oi oi-info" />
                <label for="description"> Description</label>
                <InputText id="description" @bind-Value="PostDto.Description" class="form-control" />
            </div>
            <div class="row mt-4">

                <button class="btn btn-primary" type="submit">
                    <i class="oi oi-pencil" />
                    Update
                </button>
            </div>
        </EditForm>
    }
</div>

@functions{

    //[CascadingParameter]
    //public Task<AuthenticationState> AuthState { get; set; }
    [Parameter]
    public int Id { get; set; }

    private PostDto PostDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //var authState = await AuthState;
        //string username = authState.User.FindFirst(ClaimTypes.Name).Value;

        var old = await BlogClient.GetByIdAsync(Id).ConfigureAwait(false);
        PostDto = new PostDto
        {
            Title = old.Data.Title,
            Body = old.Data.Body,
            Thumbnail = old.Data.Thumbnail,
            Tags = old.Data.Tags,
            Description = old.Data.Description
        };
    }

    protected async void HanleValidSubmit()
    {

        var response = await BlogClient.PutAsync(Id, PostDto).ConfigureAwait(false);
        if (response.Succeeded)
        {
            toastService.ShowToast("Post Updated Successfully!", ToastLevel.SUCCESS);
            navigator.NavigateTo($"/post/{(int)response.Data}");
        }
        else
        {
            toastService.ShowToast($"Couldn't Update Post, {response.Message}", ToastLevel.ERROR);
        }
    }

}